// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: music.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MusicQueueService_AddSong_FullMethodName    = "/music.MusicQueueService/AddSong"
	MusicQueueService_GetQueue_FullMethodName   = "/music.MusicQueueService/GetQueue"
	MusicQueueService_UpvoteSong_FullMethodName = "/music.MusicQueueService/UpvoteSong"
)

// MusicQueueServiceClient is the client API for MusicQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicQueueServiceClient interface {
	AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error)
	GetQueue(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongQueueResponse, error)
	UpvoteSong(ctx context.Context, in *UpvoteRequest, opts ...grpc.CallOption) (*UpvoteResponse, error)
}

type musicQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicQueueServiceClient(cc grpc.ClientConnInterface) MusicQueueServiceClient {
	return &musicQueueServiceClient{cc}
}

func (c *musicQueueServiceClient) AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSongResponse)
	err := c.cc.Invoke(ctx, MusicQueueService_AddSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicQueueServiceClient) GetQueue(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SongQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SongQueueResponse)
	err := c.cc.Invoke(ctx, MusicQueueService_GetQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicQueueServiceClient) UpvoteSong(ctx context.Context, in *UpvoteRequest, opts ...grpc.CallOption) (*UpvoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpvoteResponse)
	err := c.cc.Invoke(ctx, MusicQueueService_UpvoteSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicQueueServiceServer is the server API for MusicQueueService service.
// All implementations must embed UnimplementedMusicQueueServiceServer
// for forward compatibility.
type MusicQueueServiceServer interface {
	AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error)
	GetQueue(context.Context, *Empty) (*SongQueueResponse, error)
	UpvoteSong(context.Context, *UpvoteRequest) (*UpvoteResponse, error)
	mustEmbedUnimplementedMusicQueueServiceServer()
}

// UnimplementedMusicQueueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMusicQueueServiceServer struct{}

func (UnimplementedMusicQueueServiceServer) AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedMusicQueueServiceServer) GetQueue(context.Context, *Empty) (*SongQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueue not implemented")
}
func (UnimplementedMusicQueueServiceServer) UpvoteSong(context.Context, *UpvoteRequest) (*UpvoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpvoteSong not implemented")
}
func (UnimplementedMusicQueueServiceServer) mustEmbedUnimplementedMusicQueueServiceServer() {}
func (UnimplementedMusicQueueServiceServer) testEmbeddedByValue()                           {}

// UnsafeMusicQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicQueueServiceServer will
// result in compilation errors.
type UnsafeMusicQueueServiceServer interface {
	mustEmbedUnimplementedMusicQueueServiceServer()
}

func RegisterMusicQueueServiceServer(s grpc.ServiceRegistrar, srv MusicQueueServiceServer) {
	// If the following call pancis, it indicates UnimplementedMusicQueueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MusicQueueService_ServiceDesc, srv)
}

func _MusicQueueService_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicQueueServiceServer).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicQueueService_AddSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicQueueServiceServer).AddSong(ctx, req.(*AddSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicQueueService_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicQueueServiceServer).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicQueueService_GetQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicQueueServiceServer).GetQueue(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicQueueService_UpvoteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpvoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicQueueServiceServer).UpvoteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicQueueService_UpvoteSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicQueueServiceServer).UpvoteSong(ctx, req.(*UpvoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicQueueService_ServiceDesc is the grpc.ServiceDesc for MusicQueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicQueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "music.MusicQueueService",
	HandlerType: (*MusicQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSong",
			Handler:    _MusicQueueService_AddSong_Handler,
		},
		{
			MethodName: "GetQueue",
			Handler:    _MusicQueueService_GetQueue_Handler,
		},
		{
			MethodName: "UpvoteSong",
			Handler:    _MusicQueueService_UpvoteSong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "music.proto",
}
